/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    macros {
        grave_nomod: grave_nomod {
            compatible = "zmk,behavior-macro";
            label = "GRAVE_NOMOD";
            #binding-cells = <0>;
            bindings = <&kp GRAVE>;
        };
        login_macro: login_macro {
            compatible = "zmk,behavior-macro";
            label = "LOGIN_MACRO";
            #binding-cells = <0>;
            bindings = <&kp K &kp S &kp T &kp A &kp S &kp I &kp A &kp K>;
        };
        passw_macro: passw_macro {
            compatible = "zmk,behavior-macro";
            label = "PASSW_MACRO";
            #binding-cells = <0>;
            bindings = <&kp LS(Z) &kp X &kp D &kp E &kp W &kp A &kp S &kp NUMBER_1 &kp NUMBER_2>;
        };
    };

    behaviors {
        m_caps: m_caps {
            compatible = "zmk,behavior-mod-morph";
            label = "M_CAPS";
            bindings =
                <&lt 1 ESC>,
                <&kp TILDE>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };
        m_tab: m_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "M_TAB";
            bindings =
                <&kp TAB>,
                <&grave_nomod>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };
        j_alt_tab: j_alt_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "J_ALT_TAB";
            bindings =
                <&kp J>,
                <&kp TAB>;

            #binding-cells = <0>;
            keep-mods = <(MOD_RALT)>;
            mods = <(MOD_RALT)>;
        };
        k_alt_shift_tab: k_alt_shift_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "K_ALT_SHIFT_TAB";
            bindings =
                <&kp K>,
                <&kp LS(TAB)>;

            #binding-cells = <0>;
            mods = <(MOD_RALT)>;
            keep-mods = <(MOD_RALT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        mac {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            label = "mac";
            bindings = <
&m_tab     &kp Q  &kp W  &kp E             &kp R         &kp T        &kp Y                  &kp U       &kp I             &kp O    &kp P     &kp BSPC
&m_caps    &kp A  &kp S  &kp D             &kp F         &kp G        &kp H                  &j_alt_tab  &k_alt_shift_tab  &kp L    &kp SEMI  &kp SQT
&kp LSHFT  &kp Z  &kp X  &kp C             &kp V         &kp B        &kp N                  &kp M       &kp COMMA         &kp DOT  &kp FSLH  &kp RIGHT_SHIFT
                         &kp LEFT_CONTROL  &kp LEFT_GUI  &kp SPACE    &mt RIGHT_SHIFT ENTER  &mo 2       &kp RALT
            >;
        };

        mac__caps {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            label = "mac__caps";
            bindings = <
&trans  &trans  &trans  &kp LS(LC(TAB))  &kp LC(TAB)            &kp RS(RA(RC(RG(T))))    &kp LG(LEFT_ARROW)  &kp LA(LEFT_ARROW)  &kp LA(RIGHT_ARROW)  &kp LG(RIGHT_ARROW)  &kp LG(LEFT_BRACKET)  &kp LG(RIGHT_BRACKET)
&none   &trans  &trans  &trans           &kp RS(RA(RC(RG(F))))  &trans                   &kp LEFT            &kp DOWN            &kp UP               &kp RIGHT            &kp C_VOLUME_UP       &kp C_BRI_UP
&trans  &trans  &trans  &trans           &trans                 &trans                   &kp LA(BACKSPACE)   &kp BACKSPACE       &kp DELETE           &kp LA(DELETE)       &kp C_VOLUME_DOWN     &kp C_BRI_DN
                        &trans           &trans                 &trans                   &trans              &trans              &trans
            >;
        };

        mac__hold {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            label = "mac__hold";
            bindings = <
&kp TAB    &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &kp BSPC
&kp LCTRL  &trans    &trans  &trans    &trans    &trans       &kp MINUS  &kp EQUAL  &kp LBKT         &kp RBKT  &kp BSLH  &kp GRAVE
&kp LSHFT  &trans    &trans  &trans    &trans    &trans       &kp UNDER  &kp PLUS   &kp LBRC         &kp RBRC  &kp PIPE  &kp TILDE
                             &kp LGUI  &trans    &kp SPACE    &kp RET    &trans     &kp RALT
            >;
        };

        ms {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;

            label = "ms";
        };

        ms__caps {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;

            label = "ms__caps";
        };

        ms__hold {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;

            label = "ms__hold";
        };
    };
};
